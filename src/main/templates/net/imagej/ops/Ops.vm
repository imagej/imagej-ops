/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2016 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops;

import net.imagej.ops.Op;

/**
 * Static utility class containing built-in op interfaces.
 * <p>
 * These interfaces are intended to mark all ops using a particular name,
 * regardless of their exact functionality. For example, all ops called "eval"
 * would be marked by implementing the {@code Ops.Eval} interface, and
 * annotating them with:
 * </p>
 *
 * {@code @Plugin(type = Ops.Eval.class)}
 *
#foreach ($author in $authors)
 * @author $author
#end
 */
public final class Ops {

	private Ops() {
		// NB: Prevent instantiation of utility class.
	}
#foreach ($op in $ops)
#set ($opClass = $op.iface)

	/**
	 * Base interface for "$op.name" operations.
	 * <p>
	 * Implementing classes should be annotated with:
	 * </p>
	 *
	 * {@code @Plugin(type = Ops.${opClass}.class)}
	 */
	public interface $opClass extends Op {
		String NAME = "$op.name";
#if ($op.aliases)
		String ALIASES = "##
#set ($first = true)
#foreach ($alias in $op.aliases)
#if ($first)#set ($first = false)#else, #end
$alias##
#end##foreach ($alias in $op.aliases)
";
#end##if ($op.aliases)
	}
#end##foreach ($op in $ops)
#foreach ($ns in $namespaces)
#set ($nsClass = $ns.iface)

	/** Built-in op interfaces of the $ns.name namespace. */
	public static final class $nsClass {

		private $nsClass() {
			// NB: Prevent instantiation of utility class.
		}
#foreach ($op in $ns.ops)
#set ($opClass = $op.iface)

		/**
		 * Base interface for "$op.name" operations.
		 * <p>
		 * Implementing classes should be annotated with:
		 * </p>
		 *
		 * {@code @Plugin(type = Ops.${nsClass}.${opClass}.class)}
		 */
		public interface $opClass extends Op {
			String NAME = "${ns.name}.$op.name";
#if ($op.aliases)
			String ALIASES = "##
#set ($first = true)
#foreach ($alias in $op.aliases)
#if ($first)#set ($first = false)#else, #end
${ns.name}.$alias##
#end##foreach ($alias in $op.aliases)
";
#end##if ($op.aliases)
		}
#end##foreach ($op in $ns.ops)
	}
#end##foreach ($ns in $namespaces)

}
