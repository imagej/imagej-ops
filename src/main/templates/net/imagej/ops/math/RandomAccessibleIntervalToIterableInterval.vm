/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.math;

import net.imagej.ops.AbstractOp;
import net.imagej.ops.Contingent;
import net.imagej.ops.Ops;
import net.imglib2.Cursor;
import net.imglib2.IterableInterval;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.type.numeric.NumericType;

import org.scijava.ItemIO;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

public final class RandomAccessibleIntervalToIterableInterval {
	
	private RandomAccessibleIntervalToIterableInterval() {
		// NB: Prevent instantiation of utility class.
	}
#foreach ($op in $ops)
#set ($iface = "Ops.Math.$op.name")

	@Plugin(type = ${iface}.class, name = ${iface}.NAME)
	public static class ${op.name}#if ($op.name == "Add" || $op.name == "Subtract")##
RandomAccessibleInterval${op.preposition}IterableInterval#else##
IterableInterval${op.preposition}RandomAccessibleInterval#end##
<T extends NumericType<T>> extends AbstractOp
		implements $iface, Contingent
	{

		@Parameter(type = ItemIO.BOTH)
		private IterableInterval<T> a;

		@Parameter
		private RandomAccessibleInterval<T> b;

		@Override
		public void run() {
			final long[] pos = new long[a.numDimensions()];
			final Cursor<T> cursor = a.cursor();
			final RandomAccess<T> access = b.randomAccess();
			while (cursor.hasNext()) {
				cursor.fwd();
				cursor.localize(pos);
				access.setPosition(pos);
				cursor.get().${op.function}(access.get());
			}
		}

		@Override
		public boolean conforms() {
			int n = a.numDimensions();
			if (n != b.numDimensions()) return false;
			long[] dimsA = new long[n], dimsB = new long[n];
			a.dimensions(dimsA);
			b.dimensions(dimsB);
			for (int i = 0; i < n; i++) {
				if (dimsA[i] != dimsB[i]) return false;
			}
			return true;
		}

	}
#end
}
