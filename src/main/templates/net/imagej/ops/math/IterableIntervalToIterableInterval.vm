/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.math;

import net.imagej.ops.special.AbstractUnaryHybridOp;
import net.imagej.ops.Contingent;
import net.imagej.ops.Ops;
import net.imglib2.Cursor;
import net.imglib2.IterableInterval;
import net.imglib2.IterableInterval;
import net.imglib2.type.numeric.RealType;
import net.imglib2.util.Intervals;
import net.imglib2.util.Util;
import net.imglib2.view.Views;

import org.scijava.Priority;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

/**
 * Wrapper class for binary math operations between {@link IterableInterval} and 
 * {@link IterableInterval}s.
 *
 * @author Brian Northan, Leon Yang
 */
public final class IterableIntervalToIterableInterval {
	
	private IterableIntervalToIterableInterval() {
		// NB: Prevent instantiation of utility class.
	}
#foreach ($op in $ops)
#set ($iface = "Ops.Math.$op.name")
	
		@Plugin(type = ${iface}.class, priority = Priority.NORMAL_PRIORITY)
		public static class ${op.name}<T extends RealType<T>> extends
			AbstractUnaryHybridOp<IterableInterval<T>, IterableInterval<T>> implements $iface, Contingent
		{
		
			
			// TODO: extend common abstract base class which implements Contingent
			// for dimensionality checking.
			// TODO: code generate this and all add ops to generalize them to other
			// operators.

			@Parameter
			private IterableInterval<T> a;

			@Override
			public boolean conforms() {
				if (!Intervals.equalDimensions(in(), a)) return false;
				if (out() == null) return true;
				return Intervals.equalDimensions(a, out());
			}

			@Override
			public IterableInterval<T> createOutput(final IterableInterval<T> input) {
					
				return ops().create().img(input, input.firstElement(), null); 
			}

			@Override
			public void compute1(final IterableInterval<T> input, final IterableInterval<T> output) {
			
					final Cursor<T> cursor = a.cursor();
					final Cursor<T> cursorI = input.cursor();
					final Cursor<T> cursorO= output.cursor();
						
					while (cursor.hasNext()) {
						cursor.fwd();
						cursorI.fwd();
						cursorO.fwd();
						
						cursorO.get().set(cursorI.get());	
						cursorO.get().${op.function}(cursor.get());		
						
					}
				
			}
		}
#end
}
