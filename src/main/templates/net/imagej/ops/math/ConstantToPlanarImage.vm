/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.math;

import net.imagej.ops.Contingent;
import net.imagej.ops.Ops;
import net.imagej.ops.special.AbstractInplaceOp;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.array.FloatArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;

import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

/**
 * Wrapper class for binary math operations between constant values and {@link PlanarImg}s.
 * <p>
 * Add, subtract, multiply, and divide are implemented for {@link PlanarImg}s
 * of {@link DoubleType}.
 * </p>
 *
 * @author Leon Yang
 */
public final class ConstantToPlanarImage {
	
	private ConstantToPlanarImage() {
		// NB: Prevent instantiation of utility class.
	}
#foreach ($type in $types)
#set ($imgType = "PlanarImg<${type.name}Type, ${type.name}Array>")
#foreach ($op in $ops)
#set ($iface = "Ops.Math.$op.name")
	
	@Plugin(type = ${iface}.class)
	public static class ${op.name}${type.name} extends
		AbstractInplaceOp<$imgType> implements $iface,
		Contingent
	{

		@Parameter
		private ${type.primitive} value;

		@Override
		public void mutate(final $imgType arg) {
			long planeCount = 1;
			for (int d = 2; d < arg.numDimensions(); d++) {
				planeCount *= arg.dimension(d);
			}
			for (int p = 0; p < planeCount; p++) {
				final ${type.primitive}[] plane = arg.getPlane(p).getCurrentStorageArray();
				for (int i = 0; i < plane.length; i++) {
					plane[i] ${op.operator}= value;
				}
			}
		}

		@Override
		public boolean conforms() {
			// NB: Until https://github.com/imagej/imagej-ops/issues/95 is addressed.
			// The warning is expected, because the image parameter is assigned via
			// reflection and hence might not match the declared generic types.
			return arg().firstElement() instanceof ${type.name}Type;
		}

	}
#end
#end
}
