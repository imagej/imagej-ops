/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.features.firstorder;

import static org.junit.Assert.assertEquals;

import net.imagej.ops.features.FeatureResult;
import net.imagej.ops.OutputFunction;
import net.imagej.ops.features.AbstractFeatureTest;
import net.imagej.ops.features.Feature;
import net.imglib2.img.Img;
import net.imagej.ops.features.firstorder.FirstOrderFeatures;


import org.junit.Test;


/**
 * Testing implementations of {@link FirstOrderFeatures}
 * 
 * @author Christian Dietz (University of Konstanz)
 */
public class FirstOrderFeaturesTest extends AbstractFeatureTest {

#foreach ($op in $ops)

	/**
	 * Testing {@link Feature} implementation of {@link ${op.iface}}
	 */
	@Test
	public void ${op.iface}FeatureTest() {
			
		OutputFunction<Img, FeatureResult> compiled = fs
				.compile(FirstOrderFeatures.${op.iface}Feature.class, Img.class);

		assertEquals(${op.empty}, compiled.compute(empty).getValue(),
				SMALL_DELTA);

		assertEquals(${op.random}, compiled.compute(random).getValue(),
				SMALL_DELTA);

		assertEquals(${op.constant}, compiled.compute(constant).getValue(),
				SMALL_DELTA);
		
	}
#end

}
