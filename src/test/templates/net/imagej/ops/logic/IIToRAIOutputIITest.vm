/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2016 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.logic;

import static org.junit.Assert.assertEquals;

import net.imagej.ops.AbstractOpTest;
import net.imglib2.Cursor;
import net.imglib2.IterableInterval;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.type.logic.BitType;

import org.junit.Before;
import org.junit.Test;

public class IIToRAIOutputIITest extends AbstractOpTest {

	private Img<BitType> in1;
	private Img<BitType> in2;

	@Before
	public void initImg() {
		final boolean[] in1Data = { true, true, false, false };
		final boolean[] in2Data = { true, false, true, false };
		in1 = ArrayImgs.bits(2, 2);
		in2 = ArrayImgs.bits(2, 2);
		final Cursor<BitType> c1 = in1.cursor();
		final Cursor<BitType> c2 = in2.cursor();
		for (int i = 0; i < 4; i++) {
			c1.next().set(in1Data[i]);
			c2.next().set(in2Data[i]);
		}
	}
	
#foreach ($op in $ops)
	@Test
	public void test${op.name}() {
		@SuppressWarnings("unchecked")
		final IterableInterval<BitType> out = (IterableInterval<BitType>) ops.run(
			IIToRAIOutputII.And.class, in1, in2);
		final Cursor<BitType> in1Cursor = in1.cursor();
		final Cursor<BitType> in2Cursor = in2.cursor();
		final Cursor<BitType> outCursor = out.cursor();
		final BitType result = new BitType();
		while (in1Cursor.hasNext()) {
			result.set(in1Cursor.next());
			result.and(in2Cursor.next());
			assertEquals(result.get(), outCursor.next().get());
		}
	}

#end
}
